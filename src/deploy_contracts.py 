import base64
import os
from algosdk import account, mnemonic
from algosdk.v2client import algod
from algosdk.future import transaction
from pyteal import compileTeal, Mode
from identity_registry import approval_program as identity_approval
from identity_registry import clear_state_program as identity_clear_state
from agreement_registry import approval_program as agreement_approval
from agreement_registry import clear_state_program as agreement_clear_state

def deploy_contracts(creator_private_key):
    """
    Deploy the Identity Registry and Agreement Registry smart contracts to Algorand.
    
    Args:
        creator_private_key: The private key of the creator account
    
    Returns:
        tuple: (identity_app_id, agreement_app_id)
    """
    # Connect to Algorand client
    algod_address = os.environ.get("ALGOD_ADDRESS", "https://testnet-api.algonode.cloud")
    algod_token = os.environ.get("ALGOD_TOKEN", "")
    client = algod.AlgodClient(algod_token, algod_address)
    
    # Get creator account info
    creator_address = account.address_from_private_key(creator_private_key)
    print(f"Deploying contracts using account: {creator_address}")
    
    # Compile TEAL programs
    identity_approval_teal = compileTeal(identity_approval(), mode=Mode.Application, version=6)
    identity_clear_state_teal = compileTeal(identity_clear_state(), mode=Mode.Application, version=6)
    agreement_approval_teal = compileTeal(agreement_approval(), mode=Mode.Application, version=6)
    agreement_clear_state_teal = compileTeal(clear_state_program(), mode=Mode.Application, version=6)
    
    # Compile TEAL to bytecode
    identity_approval_bytecode = _compile_program(client, identity_approval_teal)
    identity_clear_state_bytecode = _compile_program(client, identity_clear_state_teal)
    agreement_approval_bytecode = _compile_program(client, agreement_approval_teal)
    agreement_clear_state_bytecode = _compile_program(client, agreement_clear_state_teal)
    
    # Deploy Identity Registry
    print("Deploying Identity Registry...")
    identity_app_id = _create_app(
        client,
        creator_private_key,
        identity_approval_bytecode,
        identity_clear_state_bytecode,
        global_schema=transaction.StateSchema(num_uints=16, num_byte_slices=16),
        local_schema=transaction.StateSchema(num_uints=4, num_byte_slices=16)
    )
    print(f"Identity Registry deployed with app ID: {identity_app_id}")
    
    # Deploy Agreement Registry
    print("Deploying Agreement Registry...")
    agreement_app_id = _create_app(
        client,
        creator_private_key,
        agreement_approval_bytecode,
        agreement_clear_state_bytecode,
        global_schema=transaction.StateSchema(num_uints=16, num_byte_slices=16),
        local_schema=transaction.StateSchema(num_uints=4, num_byte_slices=16)
    )
    print(f"Agreement Registry deployed with app ID: {agreement_app_id}")
    
    return identity_app_id, agreement_app_id

def _compile_program(client, teal_source):
    """Compile TEAL source to bytecode."""
    compile_response = client.compile(teal_source)
    return base64.b64decode(compile_response['result'])

def _create_app(client, creator_private_key, approval_program, clear_program, 
               global_schema, local_schema):
    """Create a new application."""
    # Get suggested parameters
    params = client.suggested_params()
    
    # Create the transaction
    txn = transaction.ApplicationCreateTxn(
        sender=account.address_from_private_key(creator_private_key),
        sp=params,
        on_complete=transaction.OnComplete.NoOpOC,
        approval_program=approval_program,
        clear_program=clear_program,
        global_schema=global_schema,
        local_schema=local_schema
    )
    
    # Sign the transaction
    signed_txn = txn.sign(creator_private_key)
    
    # Submit the transaction
    tx_id = client.send_transaction(signed_txn)
    
    # Wait for confirmation
    _wait_for_confirmation(client, tx_id)
    
    # Get the transaction response
    transaction_response = client.pending_transaction_info(tx_id)
    
    # Return the app ID
    return transaction_response['application-index']

def _wait_for_confirmation(client, tx_id):
    """Wait for a transaction to be confirmed."""
    last_round = client.status().get('last-round')
    txinfo = client.pending_transaction_info(tx_id)
    
    while not (txinfo.get('confirmed-round') and txinfo.get('confirmed-round') > 0):
        print("Waiting for confirmation...")
        last_round += 1
        client.status_after_block(last_round)
        txinfo = client.pending_transaction_info(tx_id)
    
    print(f"Transaction {tx_id} confirmed in round {txinfo.get('confirmed-round')}.")
    return txinfo

def fund_account(client, receiver_address, amount_algos):
    """
    Fund an account with Algos (useful for testing on testnet or private nets).
    This would require a funded account to send from.
    """
    # In a real-world scenario, you'd have a funded account
    # For testnet, you can use the testnet dispenser
    print(f"Fund the account {receiver_address} with {amount_algos} Algos using the Algorand testnet dispenser:")
    print("https://bank.testnet.algorand.network/")

def main():
    # Generate a new account for testing
    private_key, address = account.generate_account()
    print(f"Generated new account: {address}")
    print(f"Private key (save this securely!): {private_key}")
    print(f"Mnemonic (alternative to private key): {mnemonic.from_private_key(private_key)}")
    
    # Connect to Algorand client
    algod_address = os.environ.get("ALGOD_ADDRESS", "https://testnet-api.algonode.cloud")
    algod_token = os.environ.get("ALGOD_TOKEN", "")
    client = algod.AlgodClient(algod_token, algod_address)
    
    # Fund the account (for testnet)
    fund_account(client, address, 10)
    
    # Wait for user to fund the account
    input("Press Enter after funding the account to continue...")
    
    # Deploy contracts
    identity_app_id, agreement_app_id = deploy_contracts(private_key)
    
    print("\nDeployment Complete!")
    print(f"Identity Registry App ID: {identity_app_id}")
    print(f"Agreement Registry App ID: {agreement_app_id}")
    print("\nUse these App IDs when initializing the Document Execution Client SDK.")

if __name__ == "__main__":
    main()